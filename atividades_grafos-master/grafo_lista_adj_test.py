import unittest
from meu_grafo_lista_adj import *
from bibgrafo.grafo_errors import *
from bibgrafo.aresta import Aresta


class TestGrafo(unittest.TestCase):

    def setUp(self):
        self.g_p = MeuGrafo()
        self.g_p.adiciona_vertice("J")
        self.g_p.adiciona_vertice("C")
        self.g_p.adiciona_vertice("E")
        self.g_p.adiciona_vertice("P")
        self.g_p.adiciona_vertice("M")
        self.g_p.adiciona_vertice("T")
        self.g_p.adiciona_vertice("Z")
        self.g_p.adiciona_aresta('a1', 'J', 'C')
        self.g_p.adiciona_aresta('a2', 'C', 'E')
        self.g_p.adiciona_aresta('a3', 'C', 'E')
        self.g_p.adiciona_aresta('a4', 'P', 'C')
        self.g_p.adiciona_aresta('a5', 'P', 'C')
        self.g_p.adiciona_aresta('a6', 'T', 'C')
        self.g_p.adiciona_aresta('a7', 'M', 'C')
        self.g_p.adiciona_aresta('a8', 'M', 'T')
        self.g_p.adiciona_aresta('a9', 'T', 'Z')

        #Grafo paraiba teste

        self.paraiba = MeuGrafo()

        self.paraiba.adiciona_vertice("J")
        self.paraiba.adiciona_vertice("C")
        self.paraiba.adiciona_vertice("E")
        self.paraiba.adiciona_vertice("P")
        self.paraiba.adiciona_vertice("M")
        self.paraiba.adiciona_vertice("T")
        self.paraiba.adiciona_vertice("Z")

        self.paraiba.adiciona_aresta('a1', 'J', 'C')
        self.paraiba.adiciona_aresta('a2', 'C', 'E')
        self.paraiba.adiciona_aresta('a3', 'E', 'C')
        self.paraiba.adiciona_aresta('a4', 'C', 'P')
        self.paraiba.adiciona_aresta('a5', 'P', 'C')
        self.paraiba.adiciona_aresta('a6', 'C', 'T')
        self.paraiba.adiciona_aresta('a7', 'C', 'M')
        self.paraiba.adiciona_aresta('a8', 'M', 'T')
        self.paraiba.adiciona_aresta('a9', 'T', 'Z')

        self.p_t = MeuGrafo()
        self.p_t.adiciona_vertice('A')
        self.p_t.adiciona_vertice('B')
        self.p_t.adiciona_vertice('C')
        self.p_t.adiciona_vertice('D')
        self.p_t.adiciona_vertice('E')
        self.p_t.adiciona_vertice('F')
        self.p_t.adiciona_aresta('a1', 'A', 'B', 2)
        self.p_t.adiciona_aresta('a2', 'C', 'D', 3)
        self.p_t.adiciona_aresta('a3', 'B', 'D', 4)
        self.p_t.adiciona_aresta('a4', 'C', 'F', 15)
        self.p_t.adiciona_aresta('a5', 'D', 'E', 2)
        self.p_t.adiciona_aresta('a6', 'E', 'F', 3)

        self.p_t2 = MeuGrafo()
        self.p_t2.adiciona_vertice('A')
        self.p_t2.adiciona_vertice('B')
        self.p_t2.adiciona_vertice('C')
        self.p_t2.adiciona_vertice('D')
        self.p_t2.adiciona_vertice('E')
        self.p_t2.adiciona_vertice('F')
        self.p_t2.adiciona_vertice('G')
        self.p_t2.adiciona_aresta('a1', 'A', 'B', 2)
        self.p_t2.adiciona_aresta('a2', 'C', 'D', 3)
        self.p_t2.adiciona_aresta('a3', 'B', 'D', 4)
        self.p_t2.adiciona_aresta('a4', 'C', 'F', 15)
        self.p_t2.adiciona_aresta('a10', 'F', 'G', 8)
        self.p_t2.adiciona_aresta('a11', 'G', 'E', 9)

        self.p_t3 = MeuGrafo()
        self.p_t3.adiciona_vertice('A')
        self.p_t3.adiciona_vertice('B')
        self.p_t3.adiciona_vertice('C')
        self.p_t3.adiciona_vertice('D')
        self.p_t3.adiciona_vertice('E')
        self.p_t3.adiciona_vertice('F')
        self.p_t3.adiciona_vertice('G')
        self.p_t3.adiciona_vertice('H')
        self.p_t3.adiciona_vertice('I')
        self.p_t3.adiciona_vertice('J')
        self.p_t3.adiciona_aresta('a1', 'A', 'B', 2)
        self.p_t3.adiciona_aresta('a2', 'C', 'D', 3)
        self.p_t3.adiciona_aresta('a3', 'B', 'D', 4)
        self.p_t3.adiciona_aresta('a4', 'C', 'F', 15)
        self.p_t3.adiciona_aresta('a10', 'F', 'G', 8)
        self.p_t3.adiciona_aresta('a11', 'G', 'E', 9)
        self.p_t3.adiciona_aresta('a12', 'E', 'H', 10)
        self.p_t3.adiciona_aresta('a13', 'H', 'I', 11)
        self.p_t3.adiciona_aresta('a14', 'I', 'J', 12)
        self.p_t3.adiciona_aresta('a15', 'J', 'G', 13)

        self.p_t4 = MeuGrafo()
        self.p_t4.adiciona_vertice('Z')
        self.p_t4.adiciona_vertice('A')
        self.p_t4.adiciona_vertice('W')
        self.p_t4.adiciona_vertice('S')
        self.p_t4.adiciona_vertice('X')
        self.p_t4.adiciona_vertice('D')
        self.p_t4.adiciona_vertice('C')

        self.p_t4.adiciona_aresta('a1', 'Z', 'A', 2)
        self.p_t4.adiciona_aresta('a2', 'A', 'W', 3)
        self.p_t4.adiciona_aresta('a3', 'W', 'S', 7)
        self.p_t4.adiciona_aresta('a4', 'S', 'X', 4)
        self.p_t4.adiciona_aresta('a5', 'X', 'D', 5)
        self.p_t4.adiciona_aresta('a6', 'D', 'C', 6)
        self.p_t4.adiciona_aresta('a7', 'C', 'Z', 18)

        self.p_t5 = MeuGrafo()
        self.p_t5.adiciona_vertice('T')
        self.p_t5.adiciona_vertice('A')
        self.p_t5.adiciona_vertice('B')
        self.p_t5.adiciona_vertice('Z')
        self.p_t5.adiciona_vertice('C')
        self.p_t5.adiciona_vertice('D')
        self.p_t5.adiciona_vertice('W')
        self.p_t5.adiciona_vertice('E')

        self.p_t5.adiciona_aresta('a1', 'T', 'A', 13)
        self.p_t5.adiciona_aresta('a2', 'A', 'B', 2)
        self.p_t5.adiciona_aresta('a3', 'B', 'Z', 3)
        self.p_t5.adiciona_aresta('a4', 'Z', 'C', 7)
        self.p_t5.adiciona_aresta('a5', 'C', 'D', 4)
        self.p_t5.adiciona_aresta('a6', 'D', 'W', 5)
        self.p_t5.adiciona_aresta('a7', 'W', 'E', 6)
        self.p_t5.adiciona_aresta('a8', 'E', 'T', 18)






        #Grafo prim1


        self.grafprim1 = MeuGrafo()
        self.grafprim1.adiciona_vertice('A')
        self.grafprim1.adiciona_vertice('B')
        self.grafprim1.adiciona_vertice('D')
        self.grafprim1.adiciona_vertice('E')
        self.grafprim1.adiciona_vertice('F')
        self.grafprim1.adiciona_vertice('C')
        self.grafprim1.adiciona_aresta('a1', 'A', 'B', 2)
        self.grafprim1.adiciona_aresta('a3', 'B', 'D', 4)
        self.grafprim1.adiciona_aresta('a5', 'D', 'E', 2)
        self.grafprim1.adiciona_aresta('a6', 'E', 'F', 3)
        self.grafprim1.adiciona_aresta('a4', 'C', 'F', 15)

        self.grafprim2 = MeuGrafo()
        self.grafprim2.adiciona_vertice('A')
        self.grafprim2.adiciona_vertice('B')
        self.grafprim2.adiciona_vertice('D')
        self.grafprim2.adiciona_vertice('C')
        self.grafprim2.adiciona_vertice('F')
        self.grafprim2.adiciona_vertice('G')
        self.grafprim2.adiciona_vertice('E')
        self.grafprim2.adiciona_aresta('a1', 'A', 'B', 2)
        self.grafprim2.adiciona_aresta('a2', 'C', 'D', 3)
        self.grafprim2.adiciona_aresta('a3', 'B', 'D', 4)
        self.grafprim2.adiciona_aresta('a4', 'C', 'F', 15)
        self.grafprim2.adiciona_aresta('a10', 'F', 'G', 8)
        self.grafprim2.adiciona_aresta('a11', 'G', 'E', 9)

        self.grafprim3 = MeuGrafo()
        self.grafprim3.adiciona_vertice('A')
        self.grafprim3.adiciona_vertice('B')
        self.grafprim3.adiciona_vertice('D')
        self.grafprim3.adiciona_vertice('C')
        self.grafprim3.adiciona_vertice('F')
        self.grafprim3.adiciona_vertice('G')
        self.grafprim3.adiciona_vertice('E')
        self.grafprim3.adiciona_vertice('H')
        self.grafprim3.adiciona_vertice('I')
        self.grafprim3.adiciona_vertice('J')
        self.grafprim3.adiciona_aresta('a1', 'A', 'B', 2)
        self.grafprim3.adiciona_aresta('a3', 'B', 'D', 4)
        self.grafprim3.adiciona_aresta('a2', 'C', 'D', 3)
        self.grafprim3.adiciona_aresta('a4', 'C', 'F', 15)
        self.grafprim3.adiciona_aresta('a10', 'F', 'G', 8)
        self.grafprim3.adiciona_aresta('a11', 'G', 'E', 9)
        self.grafprim3.adiciona_aresta('a12', 'E', 'H', 10)
        self.grafprim3.adiciona_aresta('a13', 'H', 'I', 11)
        self.grafprim3.adiciona_aresta('a14', 'I', 'J', 12)

        self.grafprim4 = MeuGrafo()
        self.grafprim4.adiciona_vertice('Z')
        self.grafprim4.adiciona_vertice('A')
        self.grafprim4.adiciona_vertice('W')
        self.grafprim4.adiciona_vertice('S')
        self.grafprim4.adiciona_vertice('X')
        self.grafprim4.adiciona_vertice('D')
        self.grafprim4.adiciona_vertice('C')
        self.grafprim4.adiciona_aresta('a1', 'Z', 'A', 2)
        self.grafprim4.adiciona_aresta('a2', 'A', 'W', 3)
        self.grafprim4.adiciona_aresta('a3', 'W', 'S', 7)
        self.grafprim4.adiciona_aresta('a4', 'S', 'X', 4)
        self.grafprim4.adiciona_aresta('a5', 'X', 'D', 5)
        self.grafprim4.adiciona_aresta('a6', 'D', 'C', 6)

        self.grafprim5 = MeuGrafo()
        self.grafprim5.adiciona_vertice('A')
        self.grafprim5.adiciona_vertice('B')
        self.grafprim5.adiciona_vertice('Z')
        self.grafprim5.adiciona_vertice('C')
        self.grafprim5.adiciona_vertice('D')
        self.grafprim5.adiciona_vertice('W')
        self.grafprim5.adiciona_vertice('E')
        self.grafprim5.adiciona_vertice('T')
        self.grafprim5.adiciona_aresta('a2', 'A', 'B', 2)
        self.grafprim5.adiciona_aresta('a3', 'B', 'Z', 3)
        self.grafprim5.adiciona_aresta('a4', 'Z', 'C', 7)
        self.grafprim5.adiciona_aresta('a5', 'C', 'D', 4)
        self.grafprim5.adiciona_aresta('a6', 'D', 'W', 5)
        self.grafprim5.adiciona_aresta('a7', 'W', 'E', 6)
        self.grafprim5.adiciona_aresta('a8', 'E', 'T', 18)





        self.grafkrk = MeuGrafo()
        self.grafkrk.adiciona_vertice('A')
        self.grafkrk.adiciona_vertice('B')
        self.grafkrk.adiciona_vertice('D')
        self.grafkrk.adiciona_vertice('C')
        self.grafkrk.adiciona_vertice('F')
        self.grafkrk.adiciona_vertice('G')
        self.grafkrk.adiciona_vertice('E')
        self.grafkrk.adiciona_aresta('a1', 'A', 'B', 2)
        self.grafkrk.adiciona_aresta('a2', 'C', 'D', 3)
        self.grafkrk.adiciona_aresta('a3', 'B', 'D', 4)
        self.grafkrk.adiciona_aresta('a10', 'F', 'G', 8)
        self.grafkrk.adiciona_aresta('a11', 'G', 'E', 9)
        self.grafkrk.adiciona_aresta('a4', 'C', 'F', 15)

        self.grafkrk2 = MeuGrafo()
        self.grafkrk2.adiciona_vertice('A')
        self.grafkrk2.adiciona_vertice('B')
        self.grafkrk2.adiciona_vertice('C')
        self.grafkrk2.adiciona_vertice('D')
        self.grafkrk2.adiciona_vertice('E')
        self.grafkrk2.adiciona_vertice('F')
        self.grafkrk2.adiciona_aresta('a1', 'A', 'B', 2)
        self.grafkrk2.adiciona_aresta('a5', 'D', 'E', 2)
        self.grafkrk2.adiciona_aresta('a2', 'C', 'D', 3)
        self.grafkrk2.adiciona_aresta('a6', 'E', 'F', 3)
        self.grafkrk2.adiciona_aresta('a3', 'B', 'D', 4)

        self.grafkrk3 = MeuGrafo()
        self.grafkrk3.adiciona_vertice('A')
        self.grafkrk3.adiciona_vertice('B')
        self.grafkrk3.adiciona_vertice('C')
        self.grafkrk3.adiciona_vertice('D')
        self.grafkrk3.adiciona_vertice('E')
        self.grafkrk3.adiciona_vertice('F')
        self.grafkrk3.adiciona_vertice('G')
        self.grafkrk3.adiciona_vertice('H')
        self.grafkrk3.adiciona_vertice('I')
        self.grafkrk3.adiciona_vertice('J')
        self.grafkrk3.adiciona_aresta('a1', 'A', 'B', 2)
        self.grafkrk3.adiciona_aresta('a2', 'C', 'D', 3)
        self.grafkrk3.adiciona_aresta('a3', 'B', 'D', 4)
        self.grafkrk3.adiciona_aresta('a10', 'F', 'G', 8)
        self.grafkrk3.adiciona_aresta('a11', 'G', 'E', 9)
        self.grafkrk3.adiciona_aresta('a12', 'E', 'H', 10)
        self.grafkrk3.adiciona_aresta('a13', 'H', 'I', 11)
        self.grafkrk3.adiciona_aresta('a14', 'I', 'J', 12)
        self.grafkrk3.adiciona_aresta('a4', 'C', 'F', 15)

        self.grafkrk4 = MeuGrafo()
        self.grafkrk4.adiciona_vertice('Z')
        self.grafkrk4.adiciona_vertice('A')
        self.grafkrk4.adiciona_vertice('W')
        self.grafkrk4.adiciona_vertice('S')
        self.grafkrk4.adiciona_vertice('X')
        self.grafkrk4.adiciona_vertice('D')
        self.grafkrk4.adiciona_vertice('C')
        self.grafkrk4.adiciona_aresta('a1', 'Z', 'A', 2)
        self.grafkrk4.adiciona_aresta('a2', 'A', 'W', 3)
        self.grafkrk4.adiciona_aresta('a4', 'S', 'X', 4)
        self.grafkrk4.adiciona_aresta('a5', 'X', 'D', 5)
        self.grafkrk4.adiciona_aresta('a6', 'D', 'C', 6)
        self.grafkrk4.adiciona_aresta('a3', 'W', 'S', 7)

        self.grafkrk5 = MeuGrafo()
        self.grafkrk5.adiciona_vertice('T')
        self.grafkrk5.adiciona_vertice('A')
        self.grafkrk5.adiciona_vertice('B')
        self.grafkrk5.adiciona_vertice('Z')
        self.grafkrk5.adiciona_vertice('C')
        self.grafkrk5.adiciona_vertice('D')
        self.grafkrk5.adiciona_vertice('W')
        self.grafkrk5.adiciona_vertice('E')

        self.grafkrk5.adiciona_aresta('a2', 'A', 'B', 2)
        self.grafkrk5.adiciona_aresta('a3', 'B', 'Z', 3)
        self.grafkrk5.adiciona_aresta('a5', 'C', 'D', 4)
        self.grafkrk5.adiciona_aresta('a6', 'D', 'W', 5)
        self.grafkrk5.adiciona_aresta('a7', 'W', 'E', 6)
        self.grafkrk5.adiciona_aresta('a4', 'Z', 'C', 7)
        self.grafkrk5.adiciona_aresta('a1', 'T', 'A', 13)

        #Grafo da Paraíba g_p.dfs
        self.g_p0 = MeuGrafo()
        self.g_p0.adiciona_vertice("J")
        self.g_p0.adiciona_vertice("C")
        self.g_p0.adiciona_vertice("E")
        self.g_p0.adiciona_vertice("P")
        self.g_p0.adiciona_vertice("M")
        self.g_p0.adiciona_vertice("T")
        self.g_p0.adiciona_vertice("Z")
        self.g_p0.adiciona_aresta('a1', 'J', 'C')
        self.g_p0.adiciona_aresta('a2', 'C', 'E')
        self.g_p0.adiciona_aresta('a4', 'P', 'C')
        self.g_p0.adiciona_aresta('a6', 'T', 'C')
        self.g_p0.adiciona_aresta('a8', 'M', 'T')
        self.g_p0.adiciona_aresta('a9', 'T', 'Z')

        # Grafo da Paraíba g_p00.bfs

        self.g_p00 = MeuGrafo()
        self.g_p00.adiciona_vertice("J")
        self.g_p00.adiciona_vertice("C")
        self.g_p00.adiciona_vertice("E")
        self.g_p00.adiciona_vertice("P")
        self.g_p00.adiciona_vertice("T")
        self.g_p00.adiciona_vertice("M")
        self.g_p00.adiciona_vertice("Z")
        self.g_p00.adiciona_aresta('a1', 'J', 'C')
        self.g_p00.adiciona_aresta('a2', 'C', 'E')
        self.g_p00.adiciona_aresta('a4', 'C', 'P')
        self.g_p00.adiciona_aresta('a6', 'C', 'T')
        self.g_p00.adiciona_aresta('a7', 'C', 'M')
        self.g_p00.adiciona_aresta('a9', 'T', 'Z')

        #Grafo para prim
        self.g_prm = MeuGrafo()
        self.g_prm.adiciona_vertice("A")
        self.g_prm.adiciona_vertice("B")
        self.g_prm.adiciona_vertice("C")
        self.g_prm.adiciona_vertice("D")
        self.g_prm.adiciona_vertice("E")
        self.g_prm.adiciona_vertice("F")
        self.g_prm.adiciona_vertice("G")
        self.g_prm.adiciona_vertice("H")

        self.g_prm.adiciona_aresta("k1", "A", "B", 20)
        self.g_prm.adiciona_aresta("k2", "A", "D", 80)
        self.g_prm.adiciona_aresta("k3", "A", "G", 90)
        self.g_prm.adiciona_aresta("k4", "B", "F", 10)
        self.g_prm.adiciona_aresta("k5", "C", "F", 50)
        self.g_prm.adiciona_aresta("k6", "C", "H", 20)
        self.g_prm.adiciona_aresta("k7", "D", "G", 20)
        self.g_prm.adiciona_aresta("k8", "E", "B", 50)
        self.g_prm.adiciona_aresta("k9", "E", "G", 30)
        self.g_prm.adiciona_aresta("k10", "F", "C", 10)
        self.g_prm.adiciona_aresta("k11", "F", "D", 40)
        self.g_prm.adiciona_aresta("k12", "G", "A", 20)
        self.g_prm.adiciona_aresta("k13", "G", "A", 20)
        self.g_prm.adiciona_aresta("k14", "D", "C", 10)
        self.g_prm.adiciona_aresta("k15", "C", "D", 10)


        # Clone do Grafo da Paraíba para ver se o método equals está funcionando
        self.g_p2 = MeuGrafo()
        self.g_p2.adiciona_vertice("J")
        self.g_p2.adiciona_vertice("C")
        self.g_p2.adiciona_vertice("E")
        self.g_p2.adiciona_vertice("P")
        self.g_p2.adiciona_vertice("M")
        self.g_p2.adiciona_vertice("T")
        self.g_p2.adiciona_vertice("Z")
        self.g_p2.adiciona_aresta('a1', 'J', 'C')
        self.g_p2.adiciona_aresta('a2', 'C', 'E')
        self.g_p2.adiciona_aresta('a3', 'C', 'E')
        self.g_p2.adiciona_aresta('a4', 'P', 'C')
        self.g_p2.adiciona_aresta('a5', 'P', 'C')
        self.g_p2.adiciona_aresta('a6', 'T', 'C')
        self.g_p2.adiciona_aresta('a7', 'M', 'C')
        self.g_p2.adiciona_aresta('a8', 'M', 'T')
        self.g_p2.adiciona_aresta('a9', 'T', 'Z')



        # Outro clone do Grafo da Paraíba para ver se o método equals está funcionando
        # Esse tem um pequena diferença na primeira aresta
        self.g_p3 = MeuGrafo()
        self.g_p3.adiciona_vertice("J")
        self.g_p3.adiciona_vertice("C")
        self.g_p3.adiciona_vertice("E")
        self.g_p3.adiciona_vertice("P")
        self.g_p3.adiciona_vertice("M")
        self.g_p3.adiciona_vertice("T")
        self.g_p3.adiciona_vertice("Z")
        self.g_p3.adiciona_aresta('a', 'J', 'C')
        self.g_p3.adiciona_aresta('a2', 'C', 'E')
        self.g_p3.adiciona_aresta('a3', 'C', 'E')
        self.g_p3.adiciona_aresta('a4', 'P', 'C')
        self.g_p3.adiciona_aresta('a5', 'P', 'C')
        self.g_p3.adiciona_aresta('a6', 'T', 'C')
        self.g_p3.adiciona_aresta('a7', 'M', 'C')
        self.g_p3.adiciona_aresta('a8', 'M', 'T')
        self.g_p3.adiciona_aresta('a9', 'T', 'Z')

        # Outro clone do Grafo da Paraíba para ver se o método equals está funcionando
        # Esse tem um pequena diferença na segunda aresta
        self.g_p4 = MeuGrafo()
        self.g_p4.adiciona_vertice("J")
        self.g_p4.adiciona_vertice("C")
        self.g_p4.adiciona_vertice("E")
        self.g_p4.adiciona_vertice("P")
        self.g_p4.adiciona_vertice("M")
        self.g_p4.adiciona_vertice("T")
        self.g_p4.adiciona_vertice("Z")
        self.g_p4.adiciona_aresta('a1', 'J', 'C')
        self.g_p4.adiciona_aresta('a2', 'J', 'E')
        self.g_p4.adiciona_aresta('a3', 'C', 'E')
        self.g_p4.adiciona_aresta('a4', 'P', 'C')
        self.g_p4.adiciona_aresta('a5', 'P', 'C')
        self.g_p4.adiciona_aresta('a6', 'T', 'C')
        self.g_p4.adiciona_aresta('a7', 'M', 'C')
        self.g_p4.adiciona_aresta('a8', 'M', 'T')
        self.g_p4.adiciona_aresta('a9', 'T', 'Z')

        # Grafo da Paraíba sem arestas paralelas
        self.g_p_sem_paralelas = MeuGrafo()
        self.g_p_sem_paralelas.adiciona_vertice("J")
        self.g_p_sem_paralelas.adiciona_vertice("C")
        self.g_p_sem_paralelas.adiciona_vertice("E")
        self.g_p_sem_paralelas.adiciona_vertice("P")
        self.g_p_sem_paralelas.adiciona_vertice("M")
        self.g_p_sem_paralelas.adiciona_vertice("T")
        self.g_p_sem_paralelas.adiciona_vertice("Z")
        self.g_p_sem_paralelas.adiciona_aresta('a1', 'J', 'C')
        self.g_p_sem_paralelas.adiciona_aresta('a2', 'C', 'E')
        self.g_p_sem_paralelas.adiciona_aresta('a3', 'P', 'C')
        self.g_p_sem_paralelas.adiciona_aresta('a4', 'T', 'C')
        self.g_p_sem_paralelas.adiciona_aresta('a5', 'M', 'C')
        self.g_p_sem_paralelas.adiciona_aresta('a6', 'M', 'T')
        self.g_p_sem_paralelas.adiciona_aresta('a7', 'T', 'Z')

        # Grafos completos
        self.g_c = MeuGrafo()
        self.g_c.adiciona_vertice("J")
        self.g_c.adiciona_vertice("C")
        self.g_c.adiciona_vertice("E")
        self.g_c.adiciona_vertice("P")
        self.g_c.adiciona_aresta('a1', 'J', 'C')
        self.g_c.adiciona_aresta('a2', 'J', 'E')
        self.g_c.adiciona_aresta('a3', 'J', 'P')
        self.g_c.adiciona_aresta('a4', 'E', 'C')
        self.g_c.adiciona_aresta('a5', 'P', 'C')
        self.g_c.adiciona_aresta('a6', 'P', 'E')

        self.g_c2 = MeuGrafo()
        self.g_c2.adiciona_vertice("Nina")
        self.g_c2.adiciona_vertice("Maria")
        self.g_c2.adiciona_aresta('amiga', 'Nina', 'Maria')

        self.g_c3 = MeuGrafo()
        self.g_c3.adiciona_vertice("Único")

        # Grafos com laco
        self.g_l1 = MeuGrafo()
        self.g_l1.adiciona_vertice("A")
        self.g_l1.adiciona_vertice("B")
        self.g_l1.adiciona_vertice("C")
        self.g_l1.adiciona_vertice("D")
        self.g_l1.adiciona_aresta('a1', 'A', 'A')
        self.g_l1.adiciona_aresta('a2', 'A', 'B')
        self.g_l1.adiciona_aresta('a3', 'A', 'A')

        self.g_l2 = MeuGrafo()
        self.g_l2.adiciona_vertice("A")
        self.g_l2.adiciona_vertice("B")
        self.g_l2.adiciona_vertice("C")
        self.g_l2.adiciona_vertice("D")
        self.g_l2.adiciona_aresta('a1', 'A', 'B')
        self.g_l2.adiciona_aresta('a2', 'B', 'B')
        self.g_l2.adiciona_aresta('a3', 'B', 'A')

        self.g_l3 = MeuGrafo()
        self.g_l3.adiciona_vertice("A")
        self.g_l3.adiciona_vertice("B")
        self.g_l3.adiciona_vertice("C")
        self.g_l3.adiciona_vertice("D")
        self.g_l3.adiciona_aresta('a1', 'C', 'A')
        self.g_l3.adiciona_aresta('a2', 'C', 'C')
        self.g_l3.adiciona_aresta('a3', 'D', 'D')
        self.g_l3.adiciona_aresta('a4', 'D', 'D')

        self.g_l4 = MeuGrafo()
        self.g_l4.adiciona_vertice("D")
        self.g_l4.adiciona_aresta('a1', 'D', 'D')

        self.g_l5 = MeuGrafo()
        self.g_l5.adiciona_vertice("C")
        self.g_l5.adiciona_vertice("D")
        self.g_l5.adiciona_aresta('a1', 'D', 'C')
        self.g_l5.adiciona_aresta('a2', 'C', 'C')

        # Grafos desconexos
        self.g_d = MeuGrafo()
        self.g_d.adiciona_vertice("A")
        self.g_d.adiciona_vertice("B")
        self.g_d.adiciona_vertice("C")
        self.g_d.adiciona_vertice("D")
        self.g_d.adiciona_aresta('asd', 'A', 'B')

        self.g_d2 = MeuGrafo()
        self.g_d2.adiciona_vertice("A")
        self.g_d2.adiciona_vertice("B")
        self.g_d2.adiciona_vertice("C")
        self.g_d2.adiciona_vertice("D")

    def test_adiciona_aresta(self):
        self.assertTrue(self.g_p.adiciona_aresta('a10', 'J', 'C'))
        a = Aresta("zxc", self.g_p.get_vertice("C"), self.g_p.get_vertice("Z"))
        self.assertTrue(self.g_p.adiciona_aresta(a))
        with self.assertRaises(ArestaInvalidaError):
            self.assertTrue(self.g_p.adiciona_aresta(a))
        with self.assertRaises(VerticeInvalidoError):
            self.assertTrue(self.g_p.adiciona_aresta('b1', '', 'C'))
        with self.assertRaises(VerticeInvalidoError):
            self.assertTrue(self.g_p.adiciona_aresta('b1', 'A', 'C'))
        with self.assertRaises(NotImplementedError):
            self.g_p.adiciona_aresta('')
        with self.assertRaises(NotImplementedError):
            self.g_p.adiciona_aresta('aa-bb')
        with self.assertRaises(VerticeInvalidoError):
            self.g_p.adiciona_aresta('x', 'J', 'V')
        with self.assertRaises(ArestaInvalidaError):
            self.g_p.adiciona_aresta('a1', 'J', 'C')

    def test_eq(self):
        self.assertEqual(self.g_p, self.g_p2)
        self.assertNotEqual(self.g_p, self.g_p3)
        self.assertNotEqual(self.g_p, self.g_p_sem_paralelas)
        self.assertNotEqual(self.g_p, self.g_p4)

    def test_vertices_nao_adjacentes(self):
        self.assertEqual(self.g_p.vertices_nao_adjacentes(),
                         {'J-E', 'J-P', 'J-M', 'J-T', 'J-Z', 'C-Z', 'E-P', 'E-M', 'E-T', 'E-Z', 'P-M', 'P-T', 'P-Z',
                          'M-Z'})
        self.assertEqual(self.g_d.vertices_nao_adjacentes(), {'A-C', 'A-D', 'B-C', 'B-D', 'C-D'})
        self.assertEqual(self.g_d2.vertices_nao_adjacentes(), {'A-B', 'A-C', 'A-D', 'B-C', 'B-D', 'C-D'})
        self.assertEqual(self.g_c.vertices_nao_adjacentes(), set())
        self.assertEqual(self.g_c3.vertices_nao_adjacentes(), set())

    def test_ha_laco(self):
        self.assertFalse(self.g_p.ha_laco())
        self.assertFalse(self.g_p2.ha_laco())
        self.assertFalse(self.g_p3.ha_laco())
        self.assertFalse(self.g_p4.ha_laco())
        self.assertFalse(self.g_p_sem_paralelas.ha_laco())
        self.assertFalse(self.g_d.ha_laco())
        self.assertFalse(self.g_c.ha_laco())
        self.assertFalse(self.g_c2.ha_laco())
        self.assertFalse(self.g_c3.ha_laco())
        self.assertTrue(self.g_l1.ha_laco())
        self.assertTrue(self.g_l2.ha_laco())
        self.assertTrue(self.g_l3.ha_laco())
        self.assertTrue(self.g_l4.ha_laco())
        self.assertTrue(self.g_l5.ha_laco())

    def test_grau(self):
        # Paraíba
        self.assertEqual(self.g_p.grau('J'), 1)
        self.assertEqual(self.g_p.grau('C'), 7)
        self.assertEqual(self.g_p.grau('E'), 2)
        self.assertEqual(self.g_p.grau('P'), 2)
        self.assertEqual(self.g_p.grau('M'), 2)
        self.assertEqual(self.g_p.grau('T'), 3)
        self.assertEqual(self.g_p.grau('Z'), 1)
        with self.assertRaises(VerticeInvalidoError):
            self.assertEqual(self.g_p.grau('G'), 5)

        self.assertEqual(self.g_d.grau('A'), 1)
        self.assertEqual(self.g_d.grau('C'), 0)
        self.assertNotEqual(self.g_d.grau('D'), 2)
        self.assertEqual(self.g_d2.grau('A'), 0)

        # Completos
        self.assertEqual(self.g_c.grau('J'), 3)
        self.assertEqual(self.g_c.grau('C'), 3)
        self.assertEqual(self.g_c.grau('E'), 3)
        self.assertEqual(self.g_c.grau('P'), 3)

        # Com laço. Lembrando que cada laço conta 2 vezes por vértice para cálculo do grau
        self.assertEqual(self.g_l1.grau('A'), 5)
        self.assertEqual(self.g_l2.grau('B'), 4)
        self.assertEqual(self.g_l4.grau('D'), 2)

    def test_ha_paralelas(self):
        self.assertTrue(self.g_p.ha_paralelas())
        self.assertFalse(self.g_p_sem_paralelas.ha_paralelas())
        self.assertFalse(self.g_c.ha_paralelas())
        self.assertFalse(self.g_c2.ha_paralelas())
        self.assertFalse(self.g_c3.ha_paralelas())
        self.assertTrue(self.g_l1.ha_paralelas())

    def test_arestas_sobre_vertice(self):
        self.assertEqual(self.g_p.arestas_sobre_vertice('J'), {'a1'})
        self.assertEqual(self.g_p.arestas_sobre_vertice('C'), {'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7'})
        self.assertEqual(self.g_p.arestas_sobre_vertice('M'), {'a7', 'a8'})
        self.assertEqual(self.g_l2.arestas_sobre_vertice('B'), {'a1', 'a2', 'a3'})
        self.assertEqual(self.g_d.arestas_sobre_vertice('C'), set())
        self.assertEqual(self.g_d.arestas_sobre_vertice('A'), {'asd'})
        with self.assertRaises(VerticeInvalidoError):
            self.g_p.arestas_sobre_vertice('A')

    def test_eh_completo(self):
        self.assertFalse(self.g_p.eh_completo())
        self.assertFalse((self.g_p_sem_paralelas.eh_completo()))
        self.assertTrue((self.g_c.eh_completo()))
        self.assertTrue((self.g_c2.eh_completo()))
        self.assertTrue((self.g_c3.eh_completo()))
        self.assertFalse((self.g_l1.eh_completo()))
        self.assertFalse((self.g_l2.eh_completo()))
        self.assertFalse((self.g_l3.eh_completo()))
        self.assertFalse((self.g_l4.eh_completo()))
        self.assertFalse((self.g_l5.eh_completo()))
        self.assertFalse((self.g_d.eh_completo()))
        self.assertFalse((self.g_d2.eh_completo()))



    def test_conexo(self):
        self.assertTrue(self.g_p.conexo())
        self.assertTrue(self.g_p_sem_paralelas.conexo())
        self.assertTrue(self.g_c.conexo())
        self.assertTrue(self.g_c2.conexo())
        self.assertFalse(self.g_l1.conexo())
        self.assertFalse(self.g_l2.conexo())
        self.assertFalse(self.g_l3.conexo())
        self.assertFalse(self.g_d.conexo())


    def test_ha_ciclo(self):
        self.assertFalse(self.g_p.ha_ciclo())
        self.assertFalse(self.g_p_sem_paralelas.ha_ciclo())
        self.assertFalse(self.g_c.ha_ciclo())
        self.assertFalse(self.g_c2.ha_ciclo())
        self.assertFalse(self.g_c3.ha_ciclo())
        self.assertTrue(self.g_l1.ha_ciclo())
        self.assertTrue(self.g_l2.ha_ciclo())
        self.assertTrue(self.g_l3.ha_ciclo())
        self.assertTrue(self.g_l4.ha_ciclo())
        self.assertTrue(self.g_l5.ha_ciclo())


    def test_caminho(self):
        self.assertTrue(self.g_p.caminho('J', 'C'))
        self.assertTrue(self.g_p.caminho('C', 'J'))
        self.assertTrue(self.g_p.caminho('C', 'E'))
        self.assertTrue(self.g_p.caminho('E', 'C'))
        self.assertTrue(self.g_p.caminho('C', 'P'))
        self.assertTrue(self.g_p.caminho('P', 'C'))
        self.assertTrue(self.g_p.caminho('C', 'M'))
        self.assertFalse(self.g_p.caminho('Z', 'J'))
        self.assertFalse(self.g_p.caminho('J', 'Z'))
        self.assertFalse(self.g_p.caminho('Z', 'C'))
        self.assertFalse(self.g_p.caminho('C', 'Z'))
        self.assertFalse(self.g_p.caminho('Z', 'E'))


    def test_caminho_dois_vertices(self):
        self.assertEqual(self.g_p.caminho_dois_vertices('J', 'C'), ['J', 'C'])
        self.assertEqual(self.g_p.caminho_dois_vertices('C', 'J'), ['C', 'J'])
        self.assertEqual(self.g_p.caminho_dois_vertices('C', 'E'), ['C', 'E'])
        self.assertEqual(self.g_p.caminho_dois_vertices('E', 'C'), ['E', 'C'])
        self.assertEqual(self.g_p.caminho_dois_vertices('C', 'P'), ['C', 'P'])
        self.assertEqual(self.g_p.caminho_dois_vertices('P', 'C'), ['P', 'C'])
        self.assertEqual(self.g_p.caminho_dois_vertices('C', 'M'), ['C', 'M'])
        self.assertEqual(self.g_p.caminho_dois_vertices('Z', 'J'), [])
        self.assertEqual(self.g_p.caminho_dois_vertices('J', 'Z'), [])
        self.assertEqual(self.g_p.caminho_dois_vertices('Z', 'C'), [])
        self.assertEqual(self.g_p.caminho_dois_vertices('C', 'Z'), [])
        self.assertEqual(self.g_p.caminho_dois_vertices('Z', 'E'), [])

    def test_dfs(self):
        self.assertEqual(self.paraiba.dfs('J'),(self.g_p0))



    def test_bfs(self):
        self.assertEqual(self.paraiba.bfs('J'),(self.g_p00))

    def test_prim(self):
        self.assertEqual(self.p_t.prim(),(self.grafprim1))
        self.assertEqual(self.p_t2.prim(),(self.grafprim2))
        self.assertEqual(self.p_t3.prim(),(self.grafprim3))
        self.assertEqual(self.p_t4.prim(),(self.grafprim4))
        self.assertEqual(self.p_t5.prim(),(self.grafprim5))
    def test_kruskal(self):
        self.assertEqual(self.p_t2.Kruskall(),(self.grafkrk))
        self.assertEqual(self.p_t.Kruskall(),(self.grafkrk2))
        self.assertEqual(self.p_t3.Kruskall(),(self.grafkrk3))
        self.assertEqual(self.p_t4.Kruskall(),(self.grafkrk4))
        self.assertEqual(self.p_t5.Kruskall(),(self.grafkrk5))

